{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAeF,SAASC,cAAc,uBACtCE,EAAcH,SAASC,cAAc,sBACrCG,EAAWJ,SAASC,cAAc,wBAClCI,EAAYC,OAAOC,cAAc,QACjCC,EAAUF,OAAOC,cAAc,QAEjCE,EAAO,EACPC,EAAO,EACPC,EAAS,EACTC,EAAQ,EAqBZb,EAAOc,iBAAiB,UAAU,SAAAC,GAChCA,EAAGC,iBACHN,EAAOP,EAAac,cACpBN,EAAOP,EAAYa,cACnBL,EAASP,EAASY,cAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAQM,GAAK,EAC/BC,YAAW,WAzBf,IAAuBC,EAAOC,GAAPD,EA0BjBP,GAAS,EA1BeQ,EA2BHX,EA1BlB,IAAIY,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCR,YAAW,WACLM,EACFF,EAAQ,CACNK,MAAAR,EACAC,UAGFG,EAAO,CACLI,MAAAR,EACAC,YAGHA,OAaEQ,MAAK,SAAAC,G,IAAGC,EAAKD,EAALF,MAAOP,EAAKS,EAALT,MACdW,EAAAlC,GAASmC,OAAOC,QACd,GAAgCC,OAA7B1B,EAAQ,uBAAiC0B,OAAZJ,EAAM,QAAYI,OAANd,EAAM,UAGrDe,OAAM,SAAAN,G,IAAGO,EAAKP,EAALF,MAAOP,EAAKS,EAALT,MACfW,EAAAlC,GAASmC,OAAOK,QACd,GAAiCH,OAA9B7B,EAAU,sBAAgC6B,OAAZE,EAAM,QAAYF,OAANd,EAAM,UAGzDX,GAAQC,IACPD,GACHG,EAAQ,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst firstDelayEl = document.querySelector('input[name=\"delay\"]');\nconst stepDelayEl = document.querySelector('input[name=\"step\"]');\nconst amountEl = document.querySelector('input[name=\"amount\"]');\nconst emojiFail = String.fromCodePoint(0x1f621);\nconst emojiOk = String.fromCodePoint(0x1f604);\n\nlet time = 0;\nlet step = 0;\nlet amount = 0;\nlet count = 0;\n\nfunction createPromise(count, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({\n          count,\n          delay,\n        });\n      } else {\n        reject({\n          count,\n          delay,\n        });\n      }\n    }, delay);\n  });\n}\n\nformEl.addEventListener('submit', ev => {\n  ev.preventDefault();\n  time = firstDelayEl.valueAsNumber;\n  step = stepDelayEl.valueAsNumber;\n  amount = amountEl.valueAsNumber;\n  for (let i = 0; i < amount; i += 1) {\n    setTimeout(() => {\n      count += 1;\n      createPromise(count, time)\n        .then(({ count, delay }) => {\n          Notiflix.Notify.success(\n            `${emojiOk} Fulfilled promise ${count} in ${delay}ms`\n          );\n        })\n        .catch(({ count, delay }) => {\n          Notiflix.Notify.failure(\n            `${emojiFail} Rejected promise ${count} in ${delay}ms`\n          );\n        });\n      time += step;\n    }, time);\n    count = 0;\n  }\n});\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$firstDelayEl","$ce04d3a99e08e73b$var$stepDelayEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$emojiFail","String","fromCodePoint","$ce04d3a99e08e73b$var$emojiOk","$ce04d3a99e08e73b$var$time","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$count","addEventListener","ev","preventDefault","valueAsNumber","i","setTimeout","count1","delay","Promise","resolve","reject","shouldResolve","Math","random","count","then","param","count2","$parcel$interopDefault","Notify","success","concat","catch","count3","failure"],"version":3,"file":"03-promises.8f3fefa9.js.map"}