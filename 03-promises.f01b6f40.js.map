{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAeF,SAASC,cAAc,uBACtCE,EAAcH,SAASC,cAAc,sBACrCG,EAAWJ,SAASC,cAAc,wBAClCI,EAAYC,OAAOC,cAAc,QACjCC,EAAUF,OAAOC,cAAc,QAErC,IAAIE,EAAO,EACPC,EAAO,EACPC,EAAS,EACTC,EAAQ,EAqBZb,EAAOc,iBAAiB,UAAUC,IAChCA,EAAGC,iBACHN,EAAOP,EAAac,cACpBN,EAAOP,EAAYa,cACnBL,EAASP,EAASY,cAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAQM,GAAK,EAC/BC,YAAW,KAzBf,IAAuBC,EAAOC,EA0BxBR,GAAS,EACTH,GAAQC,GA3BSS,EA4BHP,EA5BUQ,EA4BHX,EA3BlB,IAAIY,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCR,YAAW,KACLM,EACFF,EAAQ,CACNK,MAAAR,E,MACAC,IAGFG,EAAO,CACLI,MAAAR,E,MACAC,MAGHA,OAcEQ,MAAK,EAAGD,MAAAE,EAAKT,MAAEA,MACdU,EAAAjC,GAASkC,OAAOC,QACd,GAAGxB,uBAA6BqB,QAAYT,UAG/Ca,OAAM,EAAGN,MAAAO,EAAKd,MAAEA,MACfU,EAAAjC,GAASkC,OAAOI,QACd,GAAG9B,sBAA8B6B,QAAYd,YAGlDX,GACHG,EAAQ","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst firstDelayEl = document.querySelector('input[name=\"delay\"]');\nconst stepDelayEl = document.querySelector('input[name=\"step\"]');\nconst amountEl = document.querySelector('input[name=\"amount\"]');\nconst emojiFail = String.fromCodePoint(0x1f621);\nconst emojiOk = String.fromCodePoint(0x1f604);\n\nlet time = 0;\nlet step = 0;\nlet amount = 0;\nlet count = 0;\n\nfunction createPromise(count, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({\n          count,\n          delay,\n        });\n      } else {\n        reject({\n          count,\n          delay,\n        });\n      }\n    }, delay);\n  });\n}\n\nformEl.addEventListener('submit', ev => {\n  ev.preventDefault();\n  time = firstDelayEl.valueAsNumber;\n  step = stepDelayEl.valueAsNumber;\n  amount = amountEl.valueAsNumber;\n  for (let i = 0; i < amount; i += 1) {\n    setTimeout(() => {\n      count += 1;\n      time += step;\n      createPromise(count, time)\n        .then(({ count, delay }) => {\n          Notiflix.Notify.success(\n            `${emojiOk} Fulfilled promise ${count} in ${delay}ms`\n          );\n        })\n        .catch(({ count, delay }) => {\n          Notiflix.Notify.failure(\n            `${emojiFail} Rejected promise ${count} in ${delay}ms`\n          );\n        });\n    }, time);\n    count = 0;\n  }\n});\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$firstDelayEl","$47d4ff9957288465$var$stepDelayEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$emojiFail","String","fromCodePoint","$47d4ff9957288465$var$emojiOk","$47d4ff9957288465$var$time","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$count","addEventListener","ev","preventDefault","valueAsNumber","i","setTimeout","count1","delay","Promise","resolve","reject","shouldResolve","Math","random","count","then","count2","$parcel$interopDefault","Notify","success","catch","count3","failure"],"version":3,"file":"03-promises.f01b6f40.js.map"}